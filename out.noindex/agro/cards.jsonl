{"symbols": ["FastAPI", "BaseModel", "get_graph", "health", "Answer"], "purpose": "API for health check and answering queries using a built graph.", "routes": ["/health", "/answer"], "file_path": "/Users/davidmontgomery/agro/serve_rag.py", "id": "11177390b51b"}
{"symbols": ["answer", "get_graph"], "purpose": "Answer a question using strict per-repo routing.", "routes": ["/search"], "file_path": "/Users/davidmontgomery/agro/serve_rag.py", "id": "6a2bb1b0ebd4"}
{"symbols": ["search"], "purpose": "Search for relevant code locations without generation.", "routes": [], "file_path": "/Users/davidmontgomery/agro/serve_rag.py", "id": "3fc08f3c0e32"}
{"symbols": ["_HF_PIPE", "_RERANKER", "DEFAULT_MODEL", "RERANK_BACKEND", "COHERE_MODEL", "_sigmoid", "_normalize"], "purpose": "Set up reranking configurations and define helper functions for score normalization.", "routes": [], "file_path": "/Users/davidmontgomery/agro/rerank.py", "id": "9e18cfd3ec65"}
{"symbols": ["_maybe_init_hf_pipeline", "get_reranker"], "purpose": "Initialize a Hugging Face pipeline for text classification and fallback to a reranker if necessary.", "routes": [], "file_path": "/Users/davidmontgomery/agro/rerank.py", "id": "3bc50570e734"}
{"symbols": ["rerank_results"], "purpose": "Reranks results based on relevance to the provided query using either a remote API or a local model.", "routes": [], "file_path": "/Users/davidmontgomery/agro/rerank.py", "id": "2132fcf32a1e"}
{"symbols": ["_CACHE", "_repos_file_path"], "purpose": "Defines a cache dictionary and a function to retrieve the repository file path.", "routes": [], "file_path": "/Users/davidmontgomery/agro/config_loader.py", "id": "53d28ea097dc"}
{"symbols": ["load_repos"], "purpose": "Load repository configuration from a file or environment variables.", "routes": [], "file_path": "/Users/davidmontgomery/agro/config_loader.py", "id": "ef9819790815"}
{"symbols": ["list_repos", "get_default_repo", "_find_repo", "get_repo_paths"], "purpose": "Functions to manage and retrieve repository information.", "routes": [], "file_path": "/Users/davidmontgomery/agro/config_loader.py", "id": "586ab39bac6a"}
{"symbols": ["out_dir", "get_repo_keywords", "path_boosts", "layer_bonuses"], "purpose": "These functions interact with repository data to retrieve specific attributes.", "routes": [], "file_path": "/Users/davidmontgomery/agro/config_loader.py", "id": "416f53d502d6"}
{"symbols": ["choose_repo_from_query"], "purpose": "Selects a repository based on a query string and returns the best match.", "routes": [], "file_path": "/Users/davidmontgomery/agro/config_loader.py", "id": "7d91be0e36ea"}
{"symbols": ["load_dotenv", "app", "uvicorn.run"], "purpose": "Start a Uvicorn server with environment variables loaded from a .env file.", "routes": [], "file_path": "/Users/davidmontgomery/agro/faxbot_rag.py", "id": "7e5ead94f471"}
{"symbols": ["QdrantClient", "Tokenizer", "Stemmer", "generate_text", "rerank_results"], "purpose": "This code sets up a collection of imports and functions for handling data retrieval and ranking.", "routes": [], "file_path": "/Users/davidmontgomery/agro/hybrid_search.py", "id": "a424c9848d79"}
{"symbols": ["classify_query"], "purpose": "Classifies a given query string into various categories based on its content.", "routes": [], "file_path": "/Users/davidmontgomery/agro/hybrid_search.py", "id": "98d3c459903b"}
{"symbols": ["_project_layer_bonus"], "purpose": "Calculates the bonus percentage based on the specified layer and intent.", "routes": [], "file_path": "/Users/davidmontgomery/agro/hybrid_search.py", "id": "8cd3973902e9"}
{"symbols": ["_project_layer_bonus", "_provider_plugin_hint"], "purpose": "Calculate bonus rates based on layer and intent for projects and hints for provider plugins.", "routes": [], "file_path": "/Users/davidmontgomery/agro/hybrid_search.py", "id": "b994f1fe46af"}
{"symbols": ["_origin_bonus", "_feature_bonus", "_card_bonus"], "purpose": "Calculates bonus scores based on various input criteria.", "routes": [], "file_path": "/Users/davidmontgomery/agro/hybrid_search.py", "id": "83f95bdba62d"}
{"symbols": ["_path_bonus"], "purpose": "Calculates a bonus based on specific suffixes in a file path.", "routes": [], "file_path": "/Users/davidmontgomery/agro/hybrid_search.py", "id": "5f93c47f5bd0"}
{"symbols": ["_project_path_boost"], "purpose": "Calculates a boost factor based on the presence of specific tokens in a file path when the repo tag is 'project'.", "routes": [], "file_path": "/Users/davidmontgomery/agro/hybrid_search.py", "id": "e83c174823a8"}
{"symbols": ["_lazy_import_openai", "_lazy_import_voyage", "_local_embed_model"], "purpose": "Imports OpenAI and Voyage AI client with their respective API keys.", "routes": [], "file_path": "/Users/davidmontgomery/agro/hybrid_search.py", "id": "3d263a367be8"}
{"symbols": ["_get_embedding"], "purpose": "Generates embeddings for the given text using different models based on the environment configuration.", "routes": [], "file_path": "/Users/davidmontgomery/agro/hybrid_search.py", "id": "9be740f5e75a"}
{"symbols": ["rrf", "_load_chunks"], "purpose": "Combines dense and sparse retrieval results using Reciprocal Rank Fusion.", "routes": [], "file_path": "/Users/davidmontgomery/agro/hybrid_search.py", "id": "c1498a7fec3d"}
{"symbols": ["_load_bm25_map", "_load_cards_bm25"], "purpose": "Load BM25 point IDs and cards from specified directories.", "routes": [], "file_path": "/Users/davidmontgomery/agro/hybrid_search.py", "id": "4d97b5a10a0f"}
{"symbols": ["_load_cards_map"], "purpose": "Loads card data and creates a mapping from card index to chunk ID and chunk ID to card metadata.", "routes": [], "file_path": "/Users/davidmontgomery/agro/hybrid_search.py", "id": "81e666d8be7a"}
{"symbols": ["search", "QdrantClient", "bm25s.BM25", "Tokenizer", "Stemmer"], "purpose": "Retrieves relevant code chunks based on a query using both dense and sparse retrieval methods.", "routes": [], "file_path": "/Users/davidmontgomery/agro/hybrid_search.py", "id": "1fd7f5b1731f"}
{"symbols": ["_load_code_cache"], "purpose": "Loads code from a JSONL file into a cache for a specified repository.", "routes": [], "file_path": "/Users/davidmontgomery/agro/hybrid_search.py", "id": "2c6d69068811"}
{"symbols": ["_apply_filename_boosts"], "purpose": "Assigns increased scores to documents based on the presence of query terms in their filenames and paths.", "routes": [], "file_path": "/Users/davidmontgomery/agro/hybrid_search.py", "id": "44fe8fc2e06f"}
{"symbols": ["route_repo"], "purpose": "Determines the relevant repository based on the user's query.", "routes": [], "file_path": "/Users/davidmontgomery/agro/hybrid_search.py", "id": "695ccfb6f73d"}
{"symbols": ["search_routed", "expand_queries"], "purpose": "This code performs routed searches and expands queries into multiple variants.", "routes": [], "file_path": "/Users/davidmontgomery/agro/hybrid_search.py", "id": "3ef332fa9ef5"}
{"symbols": ["search_routed_multi"], "purpose": "Searches for query variants in a specified repository and returns deduplicated and reranked results.", "routes": [], "file_path": "/Users/davidmontgomery/agro/hybrid_search.py", "id": "04147ddd8fec"}
{"symbols": ["_should_index_file", "_prune_dirs_in_place"], "purpose": "Functions to determine file indexing eligibility and prune specified directories.", "routes": [], "file_path": "/Users/davidmontgomery/agro/filtering.py", "id": "22dee42cce27"}
{"symbols": ["client"], "purpose": "Initializes and retrieves an OpenAI client for API interactions.", "routes": [], "file_path": "/Users/davidmontgomery/agro/env_model.py", "id": "1d62ddf4621d"}
{"symbols": ["_extract_text"], "purpose": "Extracts text from a response object, preferring an available output text property.", "routes": [], "file_path": "/Users/davidmontgomery/agro/env_model.py", "id": "cf2687139e0a"}
{"symbols": ["generate_text"], "purpose": "Minimal wrapper over Responses API for generating text based on user input and optional parameters.", "routes": [], "file_path": "/Users/davidmontgomery/agro/env_model.py", "id": "d37ec217af36"}
{"symbols": ["run_eval", "hit", "GOLDEN_PATH", "USE_MULTI", "FINAL_K", "search_routed", "search_routed_multi"], "purpose": "Minimal evaluation loop with regression tracking.", "routes": [], "file_path": "/Users/davidmontgomery/agro/eval_loop.py", "id": "d33015f6b365"}
{"symbols": ["run_eval_with_results"], "purpose": "Run evaluation and return detailed results of hits based on expected paths.", "routes": [], "file_path": "/Users/davidmontgomery/agro/eval_loop.py", "id": "c456424a8084"}
{"symbols": ["save_baseline"], "purpose": "Saves current results as a baseline to a JSON file.", "routes": [], "file_path": "/Users/davidmontgomery/agro/eval_loop.py", "id": "c8ffeb04436a"}
{"symbols": ["compare_with_baseline"], "purpose": "Compare current results with baseline results and report discrepancies.", "routes": [], "file_path": "/Users/davidmontgomery/agro/eval_loop.py", "id": "2f644af27dfe"}
{"symbols": ["watch_mode"], "purpose": "Monitors specified files for changes and re-runs evaluation on modifications.", "routes": [], "file_path": "/Users/davidmontgomery/agro/eval_loop.py", "id": "d05306ee5f56"}
{"symbols": ["main", "watch_mode", "run_eval_with_results", "save_baseline", "compare_with_baseline"], "purpose": "Execute evaluation loop for regression tracking with options for baseline saving and comparison.", "routes": [], "file_path": "/Users/davidmontgomery/agro/eval_loop.py", "id": "904bd7bab8b2"}
{"symbols": ["load_dotenv", "os.getenv", "os.path.join", "generate_text", "iter_chunks"], "purpose": "This code loads environment variables and processes chunks of data for retrieval.", "routes": [], "file_path": "/Users/davidmontgomery/agro/build_cards.py", "id": "d159f79a9c64"}
{"symbols": ["main", "generate_text", "os.makedirs", "iter_chunks"], "purpose": "Process code chunks to extract cards with metadata.", "routes": [], "file_path": "/Users/davidmontgomery/agro/build_cards.py", "id": "15d9f4123028"}
{"symbols": ["FastMCP", "build_graph", "search_routed_multi", "_get_graph"], "purpose": "Sets up a multi-configuration pipeline for a service using FastMCP.", "routes": [], "file_path": "/Users/davidmontgomery/agro/mcp_server_http.py", "id": "347e4b573ce2"}
{"symbols": ["answer"], "purpose": "Answer a codebase question using a local LangGraph by retrieving and generating responses.", "routes": [], "file_path": "/Users/davidmontgomery/agro/mcp_server_http.py", "id": "2d5eb03a4dda"}
{"symbols": ["search"], "purpose": "Retrieve relevant code locations without generation.", "routes": ["/mcp"], "file_path": "/Users/davidmontgomery/agro/mcp_server_http.py", "id": "a39664942775"}
{"symbols": ["_blocked"], "purpose": "This code prevents the usage of the legacy Chat Completions API in the OpenAI library.", "routes": [], "file_path": "/Users/davidmontgomery/agro/sitecustomize.py", "id": "c89da96a1a74"}
{"symbols": ["load_dotenv", "find_dotenv", "RAGState", "generate_text"], "purpose": "Load environment variables and define a data structure for RAG state management.", "routes": [], "file_path": "/Users/davidmontgomery/agro/langgraph_app.py", "id": "62850620ab5a"}
{"symbols": ["should_use_multi_query", "retrieve_node"], "purpose": "Determines if multi-query is needed based on the input question and retrieves relevant documents using a hybrid search.", "routes": [], "file_path": "/Users/davidmontgomery/agro/langgraph_app.py", "id": "c0a33ef05f94"}
{"symbols": ["route_after_retrieval", "rewrite_query"], "purpose": "Determines the action to take after document retrieval and rewrites queries for code search.", "routes": [], "file_path": "/Users/davidmontgomery/agro/langgraph_app.py", "id": "9dbdc7cf5640"}
{"symbols": ["generate_node", "generate_text", "hybrid_search_routed_multi"], "purpose": "Generates a response based on a question and provided document context, with citation details.", "routes": [], "file_path": "/Users/davidmontgomery/agro/langgraph_app.py", "id": "8e88be7a9d88"}
{"symbols": ["fallback_node"], "purpose": "Generates a message indicating low confidence from local code with repository information.", "routes": [], "file_path": "/Users/davidmontgomery/agro/langgraph_app.py", "id": "7e134556847d"}
{"symbols": ["build_graph", "StateGraph", "RedisSaver"], "purpose": "Builds and compiles a state graph for processing retrieval queries.", "routes": [], "file_path": "/Users/davidmontgomery/agro/langgraph_app.py", "id": "1d12ff14061c"}
{"symbols": ["hit"], "purpose": "Check if any expected paths are present in the given paths.", "routes": [], "file_path": "/Users/davidmontgomery/agro/eval_rag.py", "id": "68eb0d2f4f2f"}
{"symbols": ["main"], "purpose": "Processes a golden file to evaluate search hits based on user queries.", "routes": [], "file_path": "/Users/davidmontgomery/agro/eval_rag.py", "id": "b906008aecad"}
{"symbols": ["LANG_MAP", "OVERLAP_LINES", "FUNC_NODES", "IMPORT_NODES", "_ts_get_parser"], "purpose": "This code defines language mappings and node types for parsing programming languages using tree-sitter.", "routes": [], "file_path": "/Users/davidmontgomery/agro/ast_chunker.py", "id": "93ef259872ea"}
{"symbols": ["lang_from_path", "nonws_len", "extract_imports"], "purpose": "Functions for handling file paths, string lengths, and extracting imports from source code.", "routes": [], "file_path": "/Users/davidmontgomery/agro/ast_chunker.py", "id": "e23fb9d2bab7"}
{"symbols": ["greedy_fallback"], "purpose": "Splits source code into sections or blobs based on a target size.", "routes": [], "file_path": "/Users/davidmontgomery/agro/ast_chunker.py", "id": "590b4e1cb60f"}
{"symbols": ["collect_files"], "purpose": "Collects file paths from specified directories while ignoring certain patterns and directories.", "routes": [], "file_path": "/Users/davidmontgomery/agro/ast_chunker.py", "id": "1f00e58622cf"}
{"symbols": ["_guess_name"], "purpose": "Extracts the name of a function or class from code text based on the programming language.", "routes": [], "file_path": "/Users/davidmontgomery/agro/ast_chunker.py", "id": "aa7d519e0f0a"}
{"symbols": [], "purpose": "Chunks source code into manageable pieces around functions/classes using an AST parser.", "routes": [], "file_path": "/Users/davidmontgomery/agro/ast_chunker.py", "id": "51a7d2f84839"}
{"symbols": ["OLLAMA_URL", "MODEL", "SYSTEM", "PROMPT_TMPL"], "purpose": "Defines constants and a template for analyzing code using an external API.", "routes": [], "file_path": "/Users/davidmontgomery/agro/metadata_enricher.py", "id": "20c56e27fe14"}
{"symbols": ["enrich"], "purpose": "Fetches enrichment data from an external service based on a file path, language, and code.", "routes": [], "file_path": "/Users/davidmontgomery/agro/metadata_enricher.py", "id": "a58611d90421"}
{"symbols": ["load_dotenv", "build_graph", "Console", "Markdown", "Panel", "Prompt"], "purpose": "Interactive CLI chat interface for a RAG service using LangGraph with Redis for memory.", "routes": [], "file_path": "/Users/davidmontgomery/agro/chat_cli.py", "id": "f632312b7cbb"}
{"symbols": ["ChatCLI", "__init__", "_init_graph", "_get_config", "_format_answer", "ask", "switch_repo"], "purpose": "Interactive CLI chat with RAG.", "routes": [], "file_path": "/Users/davidmontgomery/agro/chat_cli.py", "id": "c7f90c570390"}
{"symbols": ["main", "ChatCLI"], "purpose": "Entry point for checking dependencies and running a chat interface.", "routes": [], "file_path": "/Users/davidmontgomery/agro/chat_cli.py", "id": "7143ebcab84e"}
{"symbols": ["QdrantClient", "_orig_recreate", "_extract_args"], "purpose": "This code defines a function to extract collection name and vectors configuration from provided arguments.", "routes": [], "file_path": "/Users/davidmontgomery/agro/qdrant_recreate_fallback.py", "id": "2f43010f64b7"}
{"symbols": ["recreate_collection_safe", "QdrantClient"], "purpose": "Safely recreates a collection, handling potential errors gracefully.", "routes": [], "file_path": "/Users/davidmontgomery/agro/qdrant_recreate_fallback.py", "id": "6da142d62811"}
{"symbols": ["load_dotenv", "find_dotenv", "get_repo_paths", "out_dir", "lang_from_path", "collect_files", "chunk_code", "Tokenizer", "Stemmer", "QdrantClient", "EmbeddingCache", "SentenceTransformer", "_prune_dirs_in_place", "_should_index_file", "PRUNE_DIRS"], "purpose": "This code chunk sets up the environment and imports various modules for file and code processing, as well as indexing and embedding functionalities.", "routes": [], "file_path": "/Users/davidmontgomery/agro/index_repo.py", "id": "46ee738d1f2f"}
